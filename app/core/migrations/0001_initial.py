# Generated by Django 3.0.6 on 2021-03-05 11:05

import app.core.utils
import app.core.validators
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254)),
                ('username', models.CharField(max_length=150, unique=True, validators=[app.core.validators.CustomUsernameValidator])),
                ('is_confirmed', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=6, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Pack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Pack',
                'verbose_name_plural': 'Packs',
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150)),
                ('host', models.BooleanField(default=False)),
                ('score', models.PositiveSmallIntegerField(default=0)),
                ('socket_channel_name', models.CharField(blank=True, max_length=200)),
                ('active', models.BooleanField(default=False)),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='core.Color')),
            ],
            options={
                'verbose_name': 'Player',
                'verbose_name_plural': 'Players',
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('current_round', models.PositiveSmallIntegerField(default=1)),
                ('max_round', models.PositiveSmallIntegerField(default=3)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Pending'), (1, 'Working'), (2, 'Answering'), (3, 'Voting'), (4, 'Finished')], default=0)),
                ('private', models.BooleanField(default=True)),
                ('password', models.CharField(blank=True, default=app.core.utils.generate_password, max_length=4, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('start_work_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Room',
                'verbose_name_plural': 'Rooms',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, unique=True)),
                ('pack', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tasks', to='core.Pack')),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
            },
        ),
        migrations.CreateModel(
            name='PlayerTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(blank=True, max_length=500)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Pending'), (1, 'Completed'), (2, 'Finished')], default=0)),
                ('scope_cost', models.PositiveSmallIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('answered_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('likes', models.ManyToManyField(related_name='liked_answers', to='core.Player')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playertasks', to='core.Player')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playertasks', to='core.Task')),
            ],
            options={
                'verbose_name': 'Own task',
                'verbose_name_plural': 'Own tasks',
            },
        ),
        migrations.AddField(
            model_name='player',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='core.Room'),
        ),
        migrations.AddField(
            model_name='player',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customuser',
            name='rooms',
            field=models.ManyToManyField(related_name='users', through='core.Player', to='core.Room'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
